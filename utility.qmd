---
title: "U.S. Greenhouse Gas Center: Data Usage Notebooks Utility Functions"
---

Welcome to the [U.S. Greenhouse Gas (GHG) Center](https://earth.gov/ghgcenter) data usage notebooks utility functions, your gateway to exploring and analyzing curated datasets on greenhouse gas emissions.
Our cloud-based system offers seamless access to GHG curated datasets. Dive into the data with our utility functions, which demonstrate how to explore, access, visualize, and conduct basic data analysis for each GHG Center dataset in a code notebook environment.

Join us in our mission to make data-driven environmental solutions.
Explore, analyze, and make a difference with the US GHG Center.

[View the US GHG Center Data Catalog](https://earth.gov/ghgcenter/data-catalog)

## Utilities

Section contains multiple utility functions
   
```{python}
import requests
import pandas as pd

RASTER_API_URL = "https://earth.gov/ghgcenter/api/raster"

def generate_stats(item, geojson, asset_name):
    """
    Retrieve statistics for a specific granule (item) within a GeoJSON-defined polygon.

    Args:
        item (dict): The granule containing item details (including assets and metadata).
        geojson (dict): A GeoJSON Feature or FeatureCollection specifying the bounding box.
        asset_name (str): The asset name or raster identifier to be used.

    Returns:
        dict: A dictionary with computed statistics and the item's datetime information.
    """
    result = requests.post(
        f"{RASTER_API_URL}/cog/statistics",
        params={"url": item["assets"][asset_name]["href"]},
        json=geojson,
    ).json()

    print(result)

    # Handle cases where either "start_datetime" or "datetime" is present
    datetime_value = item["properties"].get("start_datetime", item["properties"].get("datetime"))

    return {
        **result["properties"],
        "datetime": datetime_value,
    }



def clean_stats(stats_json):
    """
    Clean and normalize the statistics JSON data and convert it into a pandas DataFrame.

    Args:
        stats_json (list of dict): List of statistics dictionaries for each granule.

    Returns:
        pd.DataFrame: A DataFrame with flattened and cleaned statistics.
    """
    df = pd.json_normalize(stats_json)
    df.columns = [col.replace("statistics.b1.", "") for col in df.columns]
    df["date"] = pd.to_datetime(df["datetime"])
    return df


def display_stats(df, num_rows=5):
    """
    Display the top rows of the cleaned statistics DataFrame.

    Args:
        df (pd.DataFrame): DataFrame containing the cleaned statistics.
        num_rows (int): Number of rows to display (default is 5).
    """
    print(df.head(num_rows))
```

## Contact

For technical help or general questions, please contact the support team using the [feedback form](https://docs.google.com/forms/d/e/1FAIpQLSeVWCrnca08Gt_qoWYjTo6gnj1BEGL4NCUC9VEiQnXA02gzVQ/viewform).